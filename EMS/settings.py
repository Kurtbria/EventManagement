"""
Django settings for EMS project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*tah*_8(n%b9lgm0)yo#rmj2jjacz&=2x-66i3zg=(&1wy=e#a'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'eventmanagement',
    #'paypal.standard.ipn',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'eventmanagement.middleware.UserActivityMiddleware',

]

ROOT_URLCONF = 'EMS.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'EMS.wsgi.application'



DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'eric',
        'PASSWORD': 'sentinel90',
        'HOST': '127.0.0.1',  
        'PORT': '5432',       
    }
}


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


'''LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}'''


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


STATIC_URL = 'static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static' ),)

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STRIPE_PUBLISHABLE_KEY = '#'
STRIPE_SECRET_KEY = '#'

PAYPAL_SANDBOX_CLIENT_ID = '#'
PAYPAL_SANDBOX_SECRET = '#'


CONSUMER_KEY = '#'
CONSUMER_SECRET = '#'
SHORTCODE = 'your_shortcode'
PASSKEY = 'your_passkey'
INITIATE_URL = '#'

# twitter_app/twitter_service.py

import tweepy
from django.conf import settings

class TwitterService:
    def __init__(self, api_key, api_secret_key, access_token, access_token_secret):
        auth = tweepy.OAuthHandler(api_key, api_secret_key)
        auth.set_access_token(access_token, access_token_secret)
        self.api = tweepy.API(auth)
    
    def tweet(self, message):
        try:
            self.api.update_status(status=message)
        except tweepy.TweepyException as e:
            print(f"Error: {e}")
    
    def get_tweets(self, keyword, count=10):
        try:
            tweets = self.api.search(q=keyword, count=count, tweet_mode='extended')
            return [{'text': tweet.full_text, 'user': tweet.user.screen_name} for tweet in tweets]
        except tweepy.TweepyException as e:
            print(f"Error: {e}")
            return []

    def get_user_info(self, username):
        try:
            user = self.api.get_user(screen_name=username)
            return {
                'username': user.screen_name,
                'name': user.name,
                'description': user.description,
                'followers_count': user.followers_count,
                'friends_count': user.friends_count,
                'statuses_count': user.statuses_count
            }
        except tweepy.TweepyException as e:
            print(f"Error: {e}")
            return None
# twitter_app/views.py

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .serializers import TweetSerializer, KeywordSerializer, UsernameSerializer
from .twitter_service import TwitterService
from django.conf import settings

twitter_service = TwitterService(
    api_key=settings.TWITTER_API_KEY,
    api_secret_key=settings.TWITTER_API_SECRET_KEY,
    access_token=settings.TWITTER_ACCESS_TOKEN,
    access_token_secret=settings.TWITTER_ACCESS_TOKEN_SECRET
)

class TweetView(APIView):
    def post(self, request):
        serializer = TweetSerializer(data=request.data)
        if serializer.is_valid():
            twitter_service.tweet(serializer.validated_data['message'])
            return Response({'status': 'Tweet sent'}, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class MonitorTweetsView(APIView):
    def post(self, request):
        serializer = KeywordSerializer(data=request.data)
        if serializer.is_valid():
            tweets = twitter_service.get_tweets(
                keyword=serializer.validated_data['keyword'],
                count=serializer.validated_data['count']
            )
            return Response(tweets, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class UserInfoView(APIView):
    def post(self, request):
        serializer = UsernameSerializer(data=request.data)
        if serializer.is_valid():
            user_info = twitter_service.get_user_info(serializer.validated_data['username'])
            if user_info:
                return Response(user_info, status=status.HTTP_200_OK)
            return Response({'error': 'User not found or API error'}, status=status.HTTP_404_NOT_FOUND)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


# twitter_app/serializers.py

from rest_framework import serializers

class TweetSerializer(serializers.Serializer):
    message = serializers.CharField(max_length=280)

class KeywordSerializer(serializers.Serializer):
    keyword = serializers.CharField(max_length=100)
    count = serializers.IntegerField()

class UsernameSerializer(serializers.Serializer):
    username = serializers.CharField(max_length=15)

#REPLYING
# twitter_app/twitter_service.py

class TwitterService:
    # existing methods...

    def reply_to_tweet(self, message, tweet_id):
        try:
            self.api.update_status(status=message, in_reply_to_status_id=tweet_id, auto_populate_reply_metadata=True)
        except tweepy.TweepyException as e:
            print(f"Error: {e}")

# twitter_app/views.py

class ReplyTweetView(APIView):
    def post(self, request):
        serializer = TweetSerializer(data=request.data)
        tweet_id = request.data.get('tweet_id')
        if serializer.is_valid() and tweet_id:
            twitter_service.reply_to_tweet(serializer.validated_data['message'], tweet_id)
            return Response({'status': 'Reply sent'}, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
#retrive usertimeline
# twitter_app/twitter_service.py

class TwitterService:
    # existing methods...

    def get_user_timeline(self, username, count=10):
        try:
            tweets = self.api.user_timeline(screen_name=username, count=count, tweet_mode='extended')
            return [{'text': tweet.full_text, 'created_at': tweet.created_at} for tweet in tweets]
        except tweepy.TweepyException as e:
            print(f"Error: {e}")
            return []
# twitter_app/views.py

class UserTimelineView(APIView):
    def post(self, request):
        serializer = UsernameSerializer(data=request.data)
        count = request.data.get('count', 10)
        if serializer.is_valid():
            timeline = twitter_service.get_user_timeline(serializer.validated_data['username'], count)
            return Response(timeline, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


#urls and testing
# twitter_app/urls.py

from django.urls import path
from .views import TweetView, MonitorTweetsView, UserInfoView, ReplyTweetView, UserTimelineView

urlpatterns = [
    path('api/tweet/', TweetView.as_view(), name='tweet'),
    path('api/monitor/', MonitorTweetsView.as_view(), name='monitor_tweets'),
    path('api/user_info/', UserInfoView.as_view(), name='user_info'),
    path('api/reply_tweet/', ReplyTweetView.as_view(), name='reply_tweet'),
    path('api/user_timeline/', UserTimelineView.as_view(), name='user_timeline'),
]
